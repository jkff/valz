Components: client api, server, viewer api, client example (uses client api), viewer.


 Steps:
    client registers "hitCount" variable on server.
    client submits several values to it.
    viewer connects to that server and sees the results.

    Simplifications:
        Only one aggregate supported (no JSON parsing at all, everything that comes to server is intSum)
        Data stored in server's memory
        Only one server
        No batching (submit() sends data immediately)
    
    Several clients may register variables with different names

    Server also provides HTTP api to list variable names and get variable value by name

    Clients send aggregate descriptions
    Aggregate parsers are hardcoded on server

    Server uses a plugin mechanism to parse aggregates
    
    Program supports the following aggregates: int and double sum, ordered list merge (order by JSONObject key), list concatenation, map merge, pair, minimum

    Client sends data to multiple servers at once (roundrobin scheduling)

    Servers send data to parent servers. Servers are arranged in a tree-like structure, so no duplicate update problem arises.

    Program stores data on disk (flushes data to disk immediately as it is received)
        Use some kind of database (say, H2)

    Variables with history:
        History of current values of the aggregate
        Sliding aggregate
        Discrete 
        (see email)

    Clients and servers send updates to higher-level servers but do not erase them till it becomes known that the server has received the update (t.i. if parent server dies, updates are buffered until the server is resurrected). Dead servers are ignored among parent servers. Servers that get resurrected are used as parents again. 

    Disk writes are buffered    

    Program supports large maps

    Program supports large lists

    Client sends data to multiple servers at once (replication). Servers discard data that they've already received.

